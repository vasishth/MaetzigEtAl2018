Build automation
================

* managing the creation of files generated from other files
* classical case: compiling C programs
  executables depend on object files, object files depend on source and header files
* another use case: NLP pipeline (Groningen Meaning Bank) where knowledge is frequently added
* yet another one: machine learning experiments: data preprocessing, splitting, folding, training,
  decoding, evaluating, averaging over folds
* Pushing Make to the limits of my patience, then decided it was time to redo it

Desiderata
==========

* automatically run all the commands to build the requested file based on its dependencies
* don't build files that are already up-to-date (use timestamps)
* intermediate files can be deleted later without affecting up-to-dateness

The Algorithm
=============

1. Starting from targets requested by user, build the dependency graph.
   For each encountered target:
   a) Fail on cyclic dependency.
   b) Stop if the target has already been processed.
   c) Determine which rule to use (the first in the Producefile that matches).
   d) List direct dependencies and process them recursively.
   e) Determine whether the target is missing, determine its time [2]
   f) Determine whether the target is out of date [1]
   g) Store information about target: rule, direct dependencies, time,
      whether out of date, whether missing

2. For each target requested by the user, call build_if_necessary [3].

[1] A target is out of date if
* it is of type 'task', or
* some direct dependency is newer [2], or
* some direct dependency is out of date [4], or
* the "always build" option is on

[2] The time of a target is 0 if it is a task,
    its file system mtime if it is a file and exists,
    the time of its newest direct dependency if it is a file and does not exist
    (or 0 if no dependency)

[3] build_if_necessary(target):
        if target is marked as out of date or missing:
             build(target)

    build(target):
        for ddep in direct dependencies of target:
             build_if_necessary(ddep)
        run_recipe(target)
        mark target as not out of date
        mark target as not missing

[4] a *missing* direct dependency is not a sufficient reason, hence the
    distinction between out of date and missing

Target status taxonomy (draft)
==============================

 status
  error
   cyclic
    is_own_ddep
    has_ddep_with_status_cyclic
   missing_deps
    no_matching_rule
    has_ddep_with_status_missing_deps
  unavailable
   out_of_date
    task
    out_of_date_through_age
     has_ddep_with_status_existent_which_is_younger
     has_ddep_with_status_out_of_date
   nonexistant
  existant
   out_of_date
   up_to_date

Make vs. Produce
================

In both Make and Produce, a rule specifies:
* the target (more precisely, a pattern to match one)
* a list of prerequisites
* a recipe for creating the target

Produce has a minimally more verbose syntax for a rule:

# Make:
target : dep1 dep2
	recipe

# Produce:
[target pattern]
dep.name1 = dep1
dep.name2 = dep2
recipe = recipe
...

---

Make wart:
Only the first dependency is named ($<), others must be spelled out all over again in the recipe (DRY violation)

Produce solution:
name all dependencies, each goes into an attribute with the prefix "dep."
Dependencies you don't need to refer to in the recipe can just be listed in one attribute (deps).
Naming convention: extension; name for executables

---

Make wart:
Additional properties of targets, such as "phony", are specified in a counterintuitive way.

Produce solution:
Besides dependencies and recipes, rules can have unlimited attributes. Some of them have special meaning, such as type = file (default) | task ("phony target")

---

Make wart:
need to change $ into $$ in shell scripts

Produce solution:
Use %. Who needs that? (Okay, Prolog comments and Perl hashes.)

---

Make wart:
Selecting the right rule for a target is not very sophisticated, there is essentially only globbing with a single wildcard.

Produce solution:
* multiple wildcards allowed!
* full regular expressions if needed
* additional checks planned

---

Make wart:
Mapping between target and dependencies that goes beyond replacing an extension requires the use of Make functions which are limited and arcane by today's standards. I just want to write Python.
e.g. .model1 -> model2

Produce solution:
* arbitrary Python expressions for generating dependencies

Why Python?
===========

* Make it easy for users: one single script that can just be dropped in $PATH, no dependencies except Python
** requires a rich standard library, which is one of the things Python excels at, e.g.:
*** ConfigParser for reading Producefiles
*** argparse for handling command-line arguments
*** shlex for parsing lists
*** subprocess for executing recipes
*** eval for integrating Python expressions
*** logging for info messages and debugging
